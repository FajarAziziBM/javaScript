ini merupakan modul pembelajaran javascript dari kelas belajar Code Politan

Tipe Data Primitif dan Developer Tools Console

Tipe data di dalam javascript
    1. Number
    2. String
    3. Boolean
    4. Null
    5. Undefined

Menjalankan code pada Console di suatu browser
    - REPL (Read Evaluate Print Loop) 
        jadi pada Console akan melakan 4 tugas tersebut

Tipe data Number
    - Number
        di dalam javascript:
            memiliki 1 tipe data untuk masing masing jenis data. untuk keseluruhan itu di sebut tipe data Number
                contoh: 12, 124.212, -124 -> itu semua disebut tipe datanya Number

Tipe data NaN (Not A Number)
    - NaN
        kapan terjadi output program kita jika, output program tipe data yang salah

Variables
    Variable adalah sebuah wadah yang berfungsi untuk menyimpan suatu nilai, dan variable dapat di proses pada kode kita
    let namaVariable = value; ('namaVariable' adalah suatu variable, 'let' adalah perintah pendeklarasikan suatu variable )
    contoh: let umurMahasiswa = 20;

Memperbaharui value dari suatu tipe data
    1. inisialisasi sebuah variable 
    2. update value variable nya
    contoh :    let score = 0;
                score = score + 1
    penulisan kode lebih ringkas 
                score += 2

Perbedaan perintah const dan let
    kalau perintah const value dari suatu tipe data tidak dapat akan di update, sedangkan let dapat
        contoh penggunaan perintah const tersebut itu seperti rumus yang pasti, seperti const rumusLuasPersegiPanjang = "panjang * lebar

fanfec dulu untuk mendeklarasikan sebuat variable itu menggunakan var, tapi sekarang di gantikan menggunakan perintah ler yang lebih efisien dan secure

Tipe data Boolean
    penggunaan tipe data Boolean itu untuk mengkondisikan sesuatu true / false

Aturan pemberian nama variable
    https://developer.mozilla.org/en-US/docs/Glossary/Identifier
    
    1. Harus dimulai dengan huruf (a-z atau A-Z), underscore (_), atau tanda dollar ($).
    2. Setelah karakter pertama, bisa menggunakan huruf, angka, underscore, atau tanda dollar.
    3. Tidak boleh menggunakan kata kunci JavaScript (seperti var, let, const, function, dll).
    4. Case-sensitive (myVariable dan myvariable dianggap berbeda).
    5. Tidak boleh menggunakan spasi atau tanda baca selain underscore dan tanda dollar.

    Aturan yang paling sering digunakan (best practices):

    1. Camel Case: Gunakan huruf kecil untuk kata pertama, dan huruf besar untuk awal kata berikutnya. Contoh: firstName, lastName, totalAmount
    2. Gunakan nama yang deskriptif dan bermakna: Contoh: userAge (lebih baik daripada x atau a)
    3. Hindari nama yang terlalu pendek atau ambigu: Contoh: calculateTotalPrice (lebih baik daripada calc atau ctp)
    4. Gunakan bahasa Inggris untuk konsistensi: Contoh: getUserData (lebih baik daripada ambilDataPengguna)
    5. Awali nama boolean dengan "is", "has", atau "can": Contoh: isActive, hasPermission, canEdit
    6. Gunakan konstanta ALL_CAPS untuk nilai yang tidak berubah: Contoh: MAX_SIZE, API_KEY
    7. Gunakan underscore untuk nama private (konvensi, bukan aturan baku): Contoh: _privateMethod, _internalValue
    8. Hindari penggunaan angka di awal nama: Contoh: item1 (kurang baik) vs firstItem (lebih baik)

    pengetahuan :
        let namaLengkap = "Fajar Azizi Boang manalu" // Camel Case
        let NamaLengkap = "Fajar Azizi Boang manalu" // Pascal Case
        let nama_lengkap = "Fajar Azizi Boang manalu" // Snake Case
        let $namalengkap = "Fajar Azizi Boang manalu" // simbol

Tipe data String
    tipe data Primitif pada javascript
    contoh : let namaSatKer = "Fajar Azizi Boang Manalu"
             let namaSatKer = 'Fajar Azizi Boang Manalu'
    tipe data String memiliki nilai indeks, di mulai dari 0 - seterusnya (sesuai dari isi dari tipe data string)
    contoh : let namaSatKer = "Fajar Azizi Boang Manalu"
             namaSatKer[0] -> outputnya f

Method - method pada javascript
    itu banyak sekali kalau mau melihat method-method pada string bisa di liat dari sini https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String
    contoh : let namaSatKer = "Fajar Azizi Boang Manalu"
             namaSatKer.toUpperCase() -> outputnya itu FAJAR AZIZI BOANG MANALU 

Method & argumen (parameter)
    beberapa method dapat di isi parameter
    contoh : let namaSatKer = "Fajar Azizi Boang Manalu"
             namaSatKer.indexOf('l') -> outputnya 22 (22 itu indeks)

Template Literals
    Template literals adalah fitur dalam JavaScript yang diperkenalkan pada ECMAScript 2015 (ES6) yang memungkinkan Anda untuk menulis string dengan cara yang lebih fleksibel dan mudah. Beberapa fitur utama dari template literals adalah:
        1. Multiline Strings:
            Dengan template literals, Anda dapat membuat string yang mencakup beberapa baris tanpa perlu menggunakan karakter khusus seperti \n.
                contoh : const multilineString = `Ini adalah string
                yang memiliki beberapa baris.`;
                console.log(multilineString);

        2. Interpolation: 
            Anda dapat menyisipkan ekspresi JavaScript ke dalam string menggunakan tanda dolar ($) dan kurung kurawal ({}). Ini memudahkan penggabungan variabel dan ekspresi ke dalam string.
                contoh : const name = 'Fajar Azizi Boang Manalu';
                         const age = 23;
                         const greeting = `Halo, nama saya ${name} dan saya berusia ${age} tahun.`;
                         console.log(greeting);
        3. Tagging:
            Template literals juga dapat digunakan dengan fungsi tag, yang memungkinkan Anda untuk memproses string dan ekspresi dengan cara yang lebih kompleks.
                contoh : function tag(strings, ...values) {
                            return strings.reduce((result, str, i) => {
                                return result + str + (values[i] || '');
                            }, '');
                         }
                        
                        const name = 'Fajar Azizi Boang Manalu';
                        const message = tag`Halo, nama saya ${name}.`;
                        console.log(message);

Null & Undefined
    null -> - nilai "kosong" yang sengaja adalah
            - perlu dibuat
            - kalau menginisialisasikan sebuat variable dengan null, maka variable tersebut sudah di identifikasikan sebagai sebuat object
    Undefined -> variable yang dibuat tapi belum diinisialisasikan value apapun

Object dan Angka acak
    - Math 
        adalah objek built-in di JavaScript yang menyediakan berbagai fungsi dan konstanta matematika. Objek ini tidak dapat diubah, dan semua propertinya bersifat statis. Anda tidak perlu membuat instance dari Math untuk menggunakannya; Anda cukup memanggil fungsi yang diinginkan menggunakan Math.
        Beberapa Fungsi Umum dalam Object Math:
        1. Fungsi Trigonometri
        2. Fungsi Eksponensial dan Logaritmik
        3. Fungsi Pembulatan
        4. Konstanta

    - Angka Acak (Random Numbers)
        JavaScript menyediakan fungsi untuk menghasilkan angka acak melalui objek Math, khususnya menggunakan Math.random(). Fungsi ini mengembalikan angka acak antara 0 (inklusif) dan 1 (eksklusif).
        Menghasilkan Angka Acak:
        1. Angka Acak antara 0 dan 1:
            contoh: const randomNum = Math.random();
                    console.log(randomNum); // Output: Angka acak antara 0 dan 1
        2. Angka Acak dalam Rentang Tertentu:
            contoh : function getRandomInRange(min, max) {
                        return Math.random() * (max - min) + min;
                     }
                     const randomInRange = getRandomInRange(1, 10);
                     console.log(randomInRange); // Output: Angka acak antara 1 dan 10

        3. Angka Acak Bulat:
            contoh : function getRandomInt(min, max) {
                        return Math.floor(Math.random() * (max - min + 1)) + min;
                     }
                     const randomInt = getRandomInt(1, 10);
                     console.log(randomInt); // Output: Angka bulat acak antara 1 dan 10

JavaScript Logic pembuatan keputusan

    Operator Pembanding

        // Sama dengan (==)
        console.log(5 == '5'); // true

        // Sama dengan secara ketat (===)
        console.log(5 === '5'); // false

        // Tidak sama dengan (!=)
        console.log(5 != '5'); // false

        // Tidak sama dengan secara ketat (!==)
        console.log(5 !== '5'); // true

        // Lebih besar dari (>)
        console.log(5 > 3); // true

        // Lebih besar atau sama dengan (>=)
        console.log(5 >= 5); // true

        // Kurang dari (<)
        console.log(3 < 5); // true

        // Kurang dari atau sama dengan (<=)
        console.log(5 <= 5); // true

        // Contoh penggunaan dalam kondisi
        if (5 > 3) {
            console.log("5 lebih besar dari 3"); // Ini akan dicetak
        }

        if (5 === 5) {
            console.log("5 sama dengan 5"); // Ini juga akan dicetak
        }

console, alert, dan prompt
    console.log()
        Fungsi ini digunakan untuk mencetak output ke konsol. Ini sangat berguna untuk debugging dan melihat nilai variabel.

    alert()
        Fungsi ini digunakan untuk menampilkan pesan dalam kotak dialog pop-up. Ini sering digunakan untuk memberikan informasi kepada pengguna.

    prompt()
        Fungsi ini digunakan untuk meminta input dari pengguna. Ini menampilkan kotak dialog dengan input teks yang memungkinkan pengguna untuk memasukkan nilai.

Menjalankan JavaScript lewat file (bukan lewat browser lagi)
    untuk selanjutkan di lanjutkan pada file index.html dan index.js 

melakukan statement kondisi (if, if else, else)

melakukan Operator logic and 
    function contohBasicAnd() {
        console.log(true && true);   // true
        console.log(true && false);  // false
        console.log(false && true);  // false
        console.log(false && false); // false
    }
    // Contoh penggunaan
    function cekEligibilitas(umur, punyaKTP) {
        // Kedua kondisi harus benar
        if (umur >= 17 && punyaKTP === true) {
            console.log("Anda boleh mendaftar!");
        } else {
            console.log("Maaf, Anda tidak memenuhi syarat.");
        }
    }

    cekEligibilitas(18, true);   // Boleh mendaftar
    cekEligibilitas(16, true);   // Tidak boleh
    cekEligibilitas(20, false);  // Tidak boleh

melakukan Operator logic or
    function contohBasicOr() {
        // OR mengembalikan true jika SALAH SATU kondisi benar
        console.log(true || true);    // true
        console.log(true || false);   // true
        console.log(false || true);   // true
        console.log(false || false);  // false

        // Contoh praktis
        function cekEligibilitas(umur, punyaKTP) {
            // Cukup salah satu kondisi terpenuhi
            if (umur >= 17 || punyaKTP === true) {
                console.log("Anda bisa melanjutkan!");
            } else {
                console.log("Maaf, tidak memenuhi syarat.");
            }
        }

        cekEligibilitas(16, true);   // Bisa melanjutkan
        cekEligibilitas(18, false);  // Bisa melanjutkan
        cekEligibilitas(15, false);  // Tidak bisa
    }

melakukan Operator Logic Not

melakukan Operator Swicth
    switch (ekspresi) {
    case nilai1:
        // Blok kode jika ekspresi sama dengan nilai1
        break;
    case nilai2:
        // Blok kode jika ekspresi sama dengan nilai2
        break;
    default:
        // Blok kode jika tidak ada yang cocok
}
    
